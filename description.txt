/*
Name: Luascript
Core: Node.js
  (In the past: Luau)

DSL: ?
Basic Functions:
Start of Lua/Node functions
Fully LOGIC based
Simple syntax

Operators:
+      - Add
-      - Subtract
*      - Multiply
/      - Divide
%      - Modulo
+=     - Add to variable
-=     - Subtract from variable
<      - Less than
>      - Greater than
<=     - Less than or equal to
>=     - Greater than or equal to
( )    - Brackets. The deeper they are, the higher the precedence; isolated from the rest of the expression.
A ?? B     - If true, return A; otherwise, return B
::     - Equal*
!:     - Not equal*

Keywords:
END    - Keyword indicating the end
DO     - Keyword for functions and loops*
THEN   - Keyword for conditions*
THIS   - This*
RETURN - Returns a specified value
CLOSE  - Close logical gate. Useful for writing multiple conditions in one line
BEFORE - <Code here> BEFORE code; Makes everything before BEFORE local to this block
AFTER  - Body of prev. condition AFTER new condition, and also after FOR/WHILE

Data Types:
INT    - Integer, ranging from 2,147,483,648 to -2,147,483,647
NUM    - A simpler number, ranging from 256 to -255
FLT    - Floating-point number ranging from 2,147,483,648 to -2,147,483,647, with a floating comma that can be shifted
STR    - String
ARR    - Array []
VOID   - Void, which represents both 0 and 1
NIL    - Nil

  Proposed:
No typization;
Array([])
Objects/Classes({})*

Basic logical Blocks:
AND    - Logical gate "AND," returns true only if both values are true
NOT    - Logical gate "NOT," inverts logical values
OR     - Logical gate "OR," returns true if at least one value is true
NAND   - Logical gate "NAND," returns true if both values are not active
XOR    - Logical gate "XOR," returns true only if one of the two values is true
EQUAL  - Equal

Declarations:
block NAME(arg1, arg2) END
block: Keyword that declares a new logical gate, which will be accessible throughout the script like AND or OR
NAME: Name of the logical block
arg1, arg2: Arguments, such as (1 condition) : NAMEBLOCK : (2 condition)

function NAME(args) END
function: Keyword that declares a new function
NAME: Name of the function, which can be later called
args: Arguments

position NAME(condition)
position: Keyword that declares a position to which you can later jump
NAME: Name of the position
condition: Condition that must be true

lua NAME() END
lua: Keyword that declares Lua code (a large script)
NAME: Name of the code

Functions:
JUMP NAME : (condition)
JUMP: Keyword indicating a jump to a specific position
NAME: Name of the position to jump to
(condition): Condition (optional)

LUA EXECUTE : (code)
LUA EXECUTE: Keyword indicating the execution of raw Lua code. Only one command per line, without anything else.
code: Script to execute

FOR (init, condition, inc):   END
FOR: Keyword indicating a FOR loop
init: Initialization
condition: Condition
inc: Event after each loop

WHILE condition:   END
WHILE: Keyword indicating a WHILE loop
condition: Condition

IF(condition):
ELIF(condition):
ELSE:
END
IF: Condition (Start)
ELIF: Condition (After IF)
ELSE: Condition if
condition: Condition


Rules:
-Custom block can contain 5 Or LESS, But MORE then 1 letters:
  -BLOCK - Nice!
  -THEBIGGLOCK - Bad :(
  -S - Also bad :(
*/
